{"/home/travis/build/npmtest/node-npmtest-grunt-contrib-qunit/test.js":"/* istanbul instrument in package npmtest_grunt_contrib_qunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-qunit/lib.npmtest_grunt_contrib_qunit.js":"/* istanbul instrument in package npmtest_grunt_contrib_qunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_contrib_qunit = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_contrib_qunit = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-qunit/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-contrib-qunit && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_contrib_qunit */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_contrib_qunit\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_contrib_qunit.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_contrib_qunit.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_contrib_qunit.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_contrib_qunit.__dirname + '/lib.npmtest_grunt_contrib_qunit.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-qunit/node_modules/grunt-contrib-qunit/tasks/qunit.js":"/*\n * grunt-contrib-qunit\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function(grunt) {\n\n  // Nodejs libs.\n  var path = require('path');\n  var url = require('url');\n\n  // External lib.\n  var phantomjs = require('grunt-lib-phantomjs').init(grunt);\n\n  // Keep track of the last-started module and test. Additionally, keep track\n  // of status for individual test files and the entire test suite.\n  var options, currentModule, currentTest, currentStatus, status;\n\n  // Keep track of the last-started test(s).\n  var unfinished = {};\n\n  // Get an asset file, local to the root of the project.\n  var asset = path.join.bind(null, __dirname, '..');\n\n  // Allow an error message to retain its color when split across multiple lines.\n  var formatMessage = function(str) {\n    return String(str).split('\\n').map(function(s) { return s.magenta; }).join('\\n');\n  };\n\n  // If options.force then log an error, otherwise exit with a warning\n  var warnUnlessForced = function (message) {\n    if (options && options.force) {\n      grunt.log.error(message);\n    } else {\n      grunt.warn(message);\n    }\n  };\n\n  // Keep track of failed assertions for pretty-printing.\n  var failedAssertions = [];\n  var logFailedAssertions = function() {\n    var assertion;\n\n    if (options && options.summaryOnly) {\n      return;\n    }\n\n    // Print each assertion error.\n    while (assertion = failedAssertions.shift()) {\n      grunt.verbose.or.error(assertion.testName);\n      grunt.log.error('Message: ' + formatMessage(assertion.message));\n      if (assertion.actual !== assertion.expected) {\n        grunt.log.error('Actual: ' + formatMessage(assertion.actual));\n        grunt.log.error('Expected: ' + formatMessage(assertion.expected));\n      }\n      if (assertion.source) {\n        grunt.log.error(assertion.source.replace(/ {4}(at)/g, '  $1'));\n      }\n      grunt.log.writeln();\n    }\n  };\n\n  var createStatus = function() {\n    return {\n      passed: 0,\n      failed: 0,\n      skipped: 0,\n      todo: 0,\n      runtime: 0,\n      assertions: {\n        passed: 0,\n        failed: 0\n      }\n    };\n  };\n\n  var mergeStatus = function(statusA, statusB) {\n    statusA.passed += statusB.passed;\n    statusA.failed += statusB.failed;\n    statusA.skipped += statusB.skipped;\n    statusA.todo += statusB.todo;\n    statusA.runtime += statusB.runtime;\n    statusA.assertions.passed += statusB.assertions.passed;\n    statusA.assertions.failed += statusB.assertions.failed;\n  };\n\n  var generateMessage = function(status) {\n    var totalTests = status.passed + status.failed + status.skipped + status.todo;\n    var totalAssertions = status.assertions.passed + status.assertions.failed;\n\n    return [\n      totalTests,\n      \" tests completed with \",\n      status.failed,\n      \" failed, \" +\n      status.skipped,\n      \" skipped, and \",\n      status.todo,\n      \" todo. \\n\" +\n      totalAssertions,\n      \" assertions (in \",\n      status.runtime,\n      \"ms), passed: \" +\n      status.assertions.passed,\n      \", failed: \",\n      status.assertions.failed\n    ].join( \"\" );\n  };\n\n  // Copied from QUnit source code\n  var generateHash = function(module) {\n    var hex;\n    var i = 0;\n    var hash = 0;\n    var str = module + '\\x1C' + undefined;\n    var len = str.length;\n\n    for (; i < len; i++) {\n      hash  = ((hash << 5) - hash) + str.charCodeAt(i);\n      hash |= 0;\n    }\n\n    // Convert the possibly negative integer hash code into an 8 character\n    // hex string, which isn't strictly necessary but increases user understanding\n    // that the id is a SHA-like hash\n    hex = (0x100000000 + hash).toString(16);\n    if (hex.length < 8) {\n      hex = '0000000' + hex;\n    }\n\n    return hex.slice(-8);\n  };\n\n  // QUnit hooks.\n  phantomjs.on('qunit.begin', function() {\n    currentStatus = createStatus();\n  });\n\n  phantomjs.on('qunit.moduleStart', function(name) {\n    unfinished[name] = true;\n    currentModule = name;\n  });\n\n  phantomjs.on('qunit.moduleDone', function(name/*, failed, passed, total*/) {\n    delete unfinished[name];\n  });\n\n  phantomjs.on('qunit.log', function(result, actual, expected, message, source, todo) {\n    if (!result && !todo) {\n      failedAssertions.push({\n        actual: actual,\n        expected: expected,\n        message: message,\n        source: source,\n        testName: currentTest\n      });\n    }\n  });\n\n  phantomjs.on('qunit.testStart', function(name) {\n    currentTest = (currentModule ? currentModule + ' - ' : '') + name;\n    grunt.verbose.write(currentTest + '...');\n  });\n\n  phantomjs.on('qunit.testDone', function(name, failed, passed, total, runtime, skipped, todo) {\n    var testPassed = failed > 0 ? todo : !todo;\n\n    if (skipped) {\n      currentStatus.skipped++;\n    } else if (!testPassed) {\n      currentStatus.failed++;\n    } else if (todo) {\n      currentStatus.todo++;\n    } else {\n      currentStatus.passed++;\n    }\n\n    // Log errors if necessary, otherwise success.\n    if (!testPassed) {\n      // list assertions or message about todo failure\n      if (grunt.option('verbose')) {\n        grunt.log.error();\n\n        if (todo) {\n          grunt.log.error('Expected at least one failing assertion in todo test:' + name);\n        } else {\n          logFailedAssertions();\n        }\n      } else {\n        grunt.log.write('F'.red);\n      }\n    } else {\n      grunt.verbose.ok().or.write('.');\n    }\n  });\n\n  phantomjs.on('qunit.done', function(failed, passed, total, runtime) {\n    phantomjs.halt();\n\n    currentStatus.runtime += runtime;\n    currentStatus.assertions.passed += passed;\n    currentStatus.assertions.failed += failed;\n\n    // Print assertion errors here, if verbose mode is disabled.\n    if (!grunt.option('verbose')) {\n      if (currentStatus.failed > 0) {\n        grunt.log.writeln();\n        logFailedAssertions();\n      } else {\n        grunt.log.ok();\n      }\n    }\n\n    mergeStatus(status, currentStatus);\n  });\n\n  // Re-broadcast qunit events on grunt.event.\n  phantomjs.on('qunit.*', function() {\n    var args = [this.event].concat(grunt.util.toArray(arguments));\n    grunt.event.emit.apply(grunt.event, args);\n  });\n\n  // Built-in error handlers.\n  phantomjs.on('fail.load', function(url) {\n    phantomjs.halt();\n    grunt.verbose.write('...');\n    grunt.event.emit('qunit.fail.load', url);\n    grunt.log.error('PhantomJS unable to load \"' + url + '\" URI.');\n\n    status.failed += 1;\n  });\n\n  phantomjs.on('fail.timeout', function() {\n    phantomjs.halt();\n    grunt.log.writeln();\n    grunt.event.emit('qunit.fail.timeout');\n    grunt.log.error('PhantomJS timed out, possibly due to:\\n' +\n        '- QUnit is not loaded correctly.\\n- A missing QUnit start() call.\\n' +\n        '- Or, a misconfiguration of this task.');\n\n    status.failed += 1;\n  });\n\n  phantomjs.on('error.onError', function (msg, stackTrace) {\n    grunt.event.emit('qunit.error.onError', msg, stackTrace);\n  });\n\n  grunt.registerMultiTask('qunit', 'Run QUnit unit tests in a headless PhantomJS instance.', function() {\n    // Merge task-specific and/or target-specific options with these defaults.\n    options = this.options({\n      // Default PhantomJS timeout.\n      timeout: 5000,\n      // QUnit-PhantomJS bridge file to be injected.\n      inject: asset('phantomjs/bridge.js'),\n      // Explicit non-file URLs to test.\n      urls: [],\n      force: false,\n      // Connect phantomjs console output to grunt output\n      console: true,\n      // Do not use an HTTP base by default\n      httpBase: false,\n      summaryOnly: false\n    });\n\n    var urls;\n\n    if (options.httpBase) {\n      //If URLs are explicitly referenced, use them still\n      urls = options.urls;\n      // Then create URLs for the src files\n      this.filesSrc.forEach(function(testFile) {\n        urls.push(options.httpBase + '/' + testFile);\n      });\n    } else {\n      // Combine any specified URLs with src files.\n      urls = options.urls.concat(this.filesSrc);\n    }\n\n    var appendToUrls = function(queryParam, value) {\n      // Append the query param to all urls\n      urls = urls.map(function(testUrl) {\n        var parsed = url.parse(testUrl, true);\n        parsed.query[queryParam] = value;\n        delete parsed.search;\n        return url.format(parsed);\n      });\n    };\n\n    if (options.noGlobals) {\n      // Append a noglobal query string param to all urls\n      appendToUrls('noglobals', 'true');\n    }\n\n    if (grunt.option('modules')) {\n      var modules = grunt.option('modules').split(',');\n      var hashes = modules.map(function(module) {\n        return generateHash(module.trim());\n      });\n      // Append moduleId to all urls\n      appendToUrls('moduleId', hashes);\n    }\n\n    if (grunt.option('seed')) {\n      // Append seed to all urls\n      appendToUrls('seed', grunt.option('seed'));\n    }\n\n    // This task is asynchronous.\n    var done = this.async();\n\n    // Reset status.\n    status = createStatus();\n\n    // Pass-through console.log statements.\n    if(options.console) {\n      phantomjs.on('console', console.log.bind(console));\n    }\n\n    // Process each filepath in-order.\n    grunt.util.async.forEachSeries(urls, function(url, next) {\n      grunt.verbose.subhead('Testing ' + url + ' ').or.write('Testing ' + url + ' ');\n\n      // Reset current module.\n      currentModule = null;\n\n      // Launch PhantomJS.\n      grunt.event.emit('qunit.spawn', url);\n      phantomjs.spawn(url, {\n        // Additional PhantomJS options.\n        options: options,\n        // Do stuff when done.\n        done: function(err) {\n          if (err) {\n            // If there was an error, abort the series.\n            done();\n          } else {\n            // Otherwise, process next url.\n            next();\n          }\n        },\n      });\n    },\n    // All tests have been run.\n    function() {\n      var message = generateMessage(status);\n      var success;\n\n      // Log results.\n      if (status.failed > 0) {\n        warnUnlessForced(message);\n      } else {\n        grunt.verbose.writeln();\n        grunt.log.ok(message);\n      }\n\n      if (options && options.force) {\n        success = true;\n      } else {\n        success = status.failed === 0;\n      }\n\n      // All done!\n      done(success);\n    });\n  });\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-contrib-qunit/node_modules/grunt-contrib-qunit/phantomjs/bridge.js":"/*\n * grunt-contrib-qunit\n * http://gruntjs.com/\n *\n * Copyright (c) 2016 \"Cowboy\" Ben Alman, contributors\n * Licensed under the MIT license.\n */\n\n/*global QUnit:true, alert:true*/\n(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    require(['qunit'], factory);\n  } else {\n    factory(QUnit);\n  }\n}(function(QUnit) {\n  'use strict';\n\n  // Don't re-order tests.\n  QUnit.config.reorder = false;\n\n  // Send messages to the parent PhantomJS process via alert! Good times!!\n  function sendMessage() {\n    var args = [].slice.call(arguments);\n    alert(JSON.stringify(args));\n  }\n\n  // These methods connect QUnit to PhantomJS.\n  QUnit.log(function(obj) {\n    // What is this I don’t even\n    if (obj.message === '[object Object], undefined:undefined') { return; }\n\n    // Parse some stuff before sending it.\n    var actual, expected;\n    if (!obj.result) {\n      // Dumping large objects can be very slow, and the dump isn't used for\n      // passing tests, so only dump if the test failed.\n      actual = QUnit.dump.parse(obj.actual);\n      expected = QUnit.dump.parse(obj.expected);\n    }\n    // Send it.\n    sendMessage('qunit.log', obj.result, actual, expected, obj.message, obj.source, obj.todo);\n  });\n\n  QUnit.testStart(function(obj) {\n    sendMessage('qunit.testStart', obj.name);\n  });\n\n  QUnit.testDone(function(obj) {\n    sendMessage('qunit.testDone', obj.name, obj.failed, obj.passed, obj.total, obj.runtime, obj.skipped, obj.todo);\n  });\n\n  QUnit.moduleStart(function(obj) {\n    sendMessage('qunit.moduleStart', obj.name);\n  });\n\n  QUnit.moduleDone(function(obj) {\n    sendMessage('qunit.moduleDone', obj.name, obj.failed, obj.passed, obj.total);\n  });\n\n  QUnit.begin(function() {\n    sendMessage('qunit.begin');\n  });\n\n  QUnit.done(function(obj) {\n    sendMessage('qunit.done', obj.failed, obj.passed, obj.total, obj.runtime);\n  });\n}));\n"}